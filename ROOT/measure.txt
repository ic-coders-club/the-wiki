How to use root to measure maps or other scaled images
------------------------------------------------------

Root has a little known capability to import external images and display them
in a canvas.  Using this feature together with the interactve graphics editor
in root it is possible to create a simple map measuring tool.

First, you need a suitable image file such as a screen grab from Google Maps
which contains a distance scale.  Open your image file in root and display it
in it's own canvas like this.

root > TImage *img = TImage::Open("map.gif");
root > img->Draw();

Now, create a TGraph that will be filled with points selected from the canvas.
This is basically a cheap trick to store the locations of mouse clicks.

root > TGraph *gr =(TGraph*)gPad->WaitPrimitive();

 -go the pad, 
 -activate the graphics toolbar from the View menu
 -select input for a graph (looks like a polyline)
 -click on all the points you want to enter to trace your path
 -double click in the pad once you have entered the last point

After double clicking on the last point you should get the root prompt back.
You should now have a TGraph containing the coordinates of all the points you
clicked on. You can check it by gr->Print(); which will list all the X and Y
coordinates on the screen.

Now you have a path in your canvas coordinates. To convert that to a real
distance you need to input the appropriate scaling information.  Create a new
TGraph to measure the distance scale on the image using the same procedure as
for gr above.  Call it sc and just pick 2 points on the distance scale.

Let's say you picked a scale length of 200 metres. Define a suitable variable.
Use the macro measure.C to make all the calculations for you.

root > Double_t scale = 200.;
root > .L measure.C 
root > cout << measure(gr, sc, scale) << endl;

The macro measure.C is listed below.

Double_t measure(TGraph *gr, TGraph *sc, Double_t scale)
{
  // Measure a path length specified by the points of a TGraph, gr.
  // The scale distance is specified by the 2 point TGraph sc.
  // scale is a distance in some units, equal to the length of sc.
  //
  Int_t N = gr->GetN();  // number of points in gr.

  // Calculate the scaling factor for the path length.
  //
  Double_t *xsc = sc->GetX();
  Double_t *ysc = sc->GetY();
  Double_t dx = xsc[1] - xsc[0];
  Double_t dy = ysc[1] - ysc[0];
  Double_t dfact = scale/sqrt(dx*dx + dy*dy);
  
  // Add up the path length around gr.
  //
  Double_t dsum = 0.0;
  Double_t *xgr = gr->GetX();
  Double_t *ygr = gr->GetY();
  for (int i=0; i<N-1; i++)
  {
    dx = xgr[i+1] - xgr[i];
    dy = ygr[i+1] - ygr[i];
    dsum += sqrt(dx*dx + dy*dy);
  }

  return dfact*dsum;
}
